"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var simpleGet = require('simple-get');

var HttpAgent = require('agentkeepalive');

var debug = require('./debug');

var HttpsAgent = HttpAgent.HttpsAgent;
var httpAgent = new HttpAgent();
var httpsAgent = new HttpsAgent();
var RESPONSE_TIMEOUT = 15000;
var MAX_RETRIES = 5; // Just a promisified simpleGet

function getStream(options) {
  return new Promise((resolve, reject) => {
    simpleGet(options, (err, res) => err ? reject(err) : resolve(res));
  });
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
/* eslint-disable no-await-in-loop, max-depth */


module.exports =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (options) {
    var agent = options.url.startsWith('https:') ? httpsAgent : httpAgent;

    var reqOptions = _objectSpread({}, options, {
      followRedirects: false,
      agent
    });

    var error;

    for (var i = 0; i < MAX_RETRIES; i++) {
      try {
        var response = yield getStream(reqOptions);
        response.setTimeout(RESPONSE_TIMEOUT);
        return response;
      } catch (err) {
        error = err;

        if (err.statusCode && err.statusCode < 500) {
          break;
        }

        debug('Error, retrying after 1500ms: %s', err.message);
        yield delay(1500);
      }
    }

    throw error;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();