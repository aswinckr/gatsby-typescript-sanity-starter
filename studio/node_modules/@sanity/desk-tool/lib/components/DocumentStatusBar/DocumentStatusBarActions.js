"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactTippy = require("react-tippy");

var _chevronDownIcon = _interopRequireDefault(require("part:@sanity/base/chevron-down-icon"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _hotkeys = _interopRequireDefault(require("part:@sanity/components/typography/hotkeys"));

var _helpers = require("./helpers");

var _DocumentStatusBarActions = _interopRequireDefault(require("./DocumentStatusBarActions.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TOUCH_SUPPORT = 'ontouchstart' in document.documentElement;

class DocumentStatusBarActions extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      focusedMenuItemIdx: -1,
      isMenuOpen: false
    });

    _defineProperty(this, "actionsDropDownButtonRef", _react.default.createRef());

    _defineProperty(this, "menuElementRef", _react.default.createRef());

    _defineProperty(this, "handleDropDownButtonClick", event => {
      // prevent the global click handler from handling this event
      event.stopPropagation(); // toggle the menu

      this.setState(state => {
        return {
          focusedMenuItemIdx: -1,
          isMenuOpen: !state.isMenuOpen
        };
      });
    });

    _defineProperty(this, "handleWindowClick", event => {
      if (this.state.isMenuOpen) {
        var clickMenuElement = event.target.closest('[data-menu="true"]');

        if (clickMenuElement && clickMenuElement === this.menuElementRef.current) {// clicked within menu
          // do nothing
        } else {
          // clicked outside of menu
          this.setState(state => ({
            focusedMenuItemIdx: -1,
            isMenuOpen: false
          }));
        }
      }
    });

    _defineProperty(this, "handleActionClick", (event, action) => {
      if (action.handleClick) {
        action.handleClick(event);
      } // hide menu


      this.setState(state => ({
        focusedMenuItemIdx: -1,
        isMenuOpen: false
      }));
    });

    _defineProperty(this, "handleDropDownKeyDown", event => {
      // Space or Enter opens `role=menu` and moves focus to first `role=menuitem`
      if (!this.state.isMenuOpen && (event.key === 'Enter' || event.key === ' ')) {
        event.preventDefault();
        var menuElement = this.menuElementRef.current;
        if (!menuElement) return;
        var focusedMenuItemIdx = (0, _helpers.getNextFocusableMenuItemIdx)(this.props.actions, this.state.focusedMenuItemIdx);
        var focusedMenuItem = menuElement.childNodes[focusedMenuItemIdx];

        if (focusedMenuItem && focusedMenuItem.firstChild) {
          this.setState(state => ({
            focusedMenuItemIdx,
            isMenuOpen: true
          }));
          setTimeout(() => {
            focusedMenuItem.firstChild.focus();
          }, 0);
        }

        return;
      } // Esc should close the menu and focus the button


      if (event.key === 'Escape') {
        this.setState({
          isMenuOpen: false
        });
        this.focusDropDownButton();
        return;
      } // Space or Enter should focus the button after the menu is closed


      if (event.key === 'Enter' || event.key === ' ') {
        this.focusDropDownButton();
        return;
      } // Up Arrow opens `role=menu` and moves focus to last `role=menuitem`


      if (event.key === 'ArrowUp') {
        var _menuElement = this.menuElementRef.current;
        if (!_menuElement) return;

        var _focusedMenuItemIdx = (0, _helpers.getPreviousFocusableMenuItemIdx)(this.props.actions, this.state.focusedMenuItemIdx);

        var _focusedMenuItem = _menuElement.childNodes[_focusedMenuItemIdx];

        if (_focusedMenuItem && _focusedMenuItem.firstChild) {
          this.setState(state => ({
            focusedMenuItemIdx: _focusedMenuItemIdx,
            isMenuOpen: true
          }));
          setTimeout(() => {
            _focusedMenuItem.firstChild.focus();
          }, 0);
        }
      } // Down Arrow opens `role=menu` and moves focus to last `role=menuitem`


      if (event.key === 'ArrowDown') {
        var _menuElement2 = this.menuElementRef.current;
        if (!_menuElement2) return;

        var _focusedMenuItemIdx2 = (0, _helpers.getNextFocusableMenuItemIdx)(this.props.actions, this.state.focusedMenuItemIdx);

        var _focusedMenuItem2 = _menuElement2.childNodes[_focusedMenuItemIdx2];

        if (_focusedMenuItem2 && _focusedMenuItem2.firstChild) {
          this.setState(state => ({
            focusedMenuItemIdx: _focusedMenuItemIdx2,
            isMenuOpen: true
          }));
          setTimeout(() => {
            _focusedMenuItem2.firstChild.focus();
          }, 0);
        }
      } // TODO
      // Home	Moves focus to the first menu item.
      // End	Moves focus to the last menu item.
      // A-Z
      // a-z
      //   Moves focus to the next menu item with a label that starts with the typed character if such an menu item exists.
      //   Otherwise, focus does not move.

    });
  }

  componentDidMount() {
    // NOTE: used to capture clicks outside menu
    window.addEventListener('click', this.handleWindowClick);
  }

  componentWillUnmount() {
    // NOTE: used to capture clicks outside menu
    window.removeEventListener('click', this.handleWindowClick);
  }

  focusDropDownButton() {
    var elm = this.actionsDropDownButtonRef && this.actionsDropDownButtonRef.current && this.actionsDropDownButtonRef.current._element;

    if (elm) {
      setTimeout(() => {
        // console.log(elm)
        elm.focus();
      }, 0);
    }
  } // eslint-disable-next-line complexity


  render() {
    var _this$props = this.props,
        actions = _this$props.actions,
        idPrefix = _this$props.idPrefix,
        isDisconnected = _this$props.isDisconnected;
    var isMenuOpen = this.state.isMenuOpen;
    var firstAction = actions[0];
    var restActions = actions.slice(1);
    var restActionsLen = restActions.length;
    var hasMoreActions = restActionsLen > 0;
    var firstActionDisabled = firstAction && (!firstAction.handleClick || isDisconnected || firstAction.disabled);
    return _react.default.createElement("div", {
      className: isMenuOpen ? _DocumentStatusBarActions.default.isMenuOpen : _DocumentStatusBarActions.default.root
    }, firstAction && _react.default.createElement("div", {
      className: _DocumentStatusBarActions.default.mainAction
    }, _react.default.createElement(_reactTippy.Tooltip, {
      arrow: true,
      theme: "light",
      disabled: firstActionDisabled || !firstAction.hotkeys || TOUCH_SUPPORT,
      className: _DocumentStatusBarActions.default.tooltip,
      html: _react.default.createElement("span", {
        className: _DocumentStatusBarActions.default.tooltipHotkeys
      }, _react.default.createElement(_hotkeys.default, {
        keys: firstAction.hotkeys
      }))
    }, _react.default.createElement(_default2.default, {
      className: hasMoreActions ? _DocumentStatusBarActions.default.mainActionButtonWithMoreActions : _DocumentStatusBarActions.default.mainActionButton,
      color: firstActionDisabled ? undefined : firstAction.color,
      disabled: firstActionDisabled,
      onClick: firstAction.handleClick
    }, firstAction.label))), hasMoreActions && _react.default.createElement("div", {
      className: _DocumentStatusBarActions.default.actionsDropDown,
      onKeyDown: this.handleDropDownKeyDown
    }, _react.default.createElement(_default2.default, {
      "aria-controls": "".concat(idPrefix, "-menu"),
      "aria-haspopup": "true",
      "aria-label": "Actions",
      className: _DocumentStatusBarActions.default.actionsDropDownButton,
      disabled: isDisconnected,
      icon: _chevronDownIcon.default,
      id: "".concat(idPrefix, "-button"),
      kind: "secondary",
      onClick: this.handleDropDownButtonClick,
      ref: this.actionsDropDownButtonRef
    }), _react.default.createElement("div", {
      className: _DocumentStatusBarActions.default.menuContainer
    }, _react.default.createElement("ul", {
      "aria-labelledby": "".concat(idPrefix, "-button"),
      className: _DocumentStatusBarActions.default.menu,
      "data-menu": true,
      id: "".concat(idPrefix, "-menu"),
      ref: this.menuElementRef,
      role: "menu"
    }, restActions.map((action, idx) => _react.default.createElement("li", {
      className: _DocumentStatusBarActions.default.menuItem,
      key: action.id,
      role: "presentation"
    }, _react.default.createElement("button", {
      "aria-label": action.label,
      className: _DocumentStatusBarActions.default.menuItemButton,
      disabled: !action.handleClick || isDisconnected || action.disabled // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: event => this.handleActionClick(event, action),
      role: "menuitem",
      tabIndex: -1,
      type: "button"
    }, _react.default.createElement("div", {
      tabIndex: -1
    }, action.icon && _react.default.createElement("span", {
      className: _DocumentStatusBarActions.default.menuItemIcon
    }, _react.default.createElement(action.icon)), _react.default.createElement("span", {
      className: _DocumentStatusBarActions.default.menuItemLabel
    }, action.label), action.hotkeys && _react.default.createElement("span", {
      className: _DocumentStatusBarActions.default.menuItemHotkeys
    }, _react.default.createElement(_hotkeys.default, {
      keys: action.hotkeys
    }))))))))));
  }

}

_defineProperty(DocumentStatusBarActions, "propTypes", {
  actions: _propTypes.default.arrayOf(_propTypes.default.shape({
    color: _propTypes.default.oneOf(['primary', 'success', 'danger', 'white', 'warning']),
    disabled: _propTypes.default.bool,
    handleClick: _propTypes.default.func,
    hotkeys: _propTypes.default.arrayOf(_propTypes.default.string),
    icon: _propTypes.default.func,
    id: _propTypes.default.string.isRequired,
    label: _propTypes.default.string.isRequired
  })).isRequired,
  idPrefix: _propTypes.default.string.isRequired,
  isDisconnected: _propTypes.default.bool
});

_defineProperty(DocumentStatusBarActions, "defaultProps", {
  isDisconnected: false
});

var _default = DocumentStatusBarActions;
exports.default = _default;