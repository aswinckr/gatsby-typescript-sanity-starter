"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/badges/default"));

var _checkIcon = _interopRequireDefault(require("part:@sanity/base/check-icon"));

var _syncIcon = _interopRequireDefault(require("part:@sanity/base/sync-icon"));

var _DocumentStatusBarActions = _interopRequireDefault(require("./DocumentStatusBarActions"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _buttonGrid = _interopRequireDefault(require("part:@sanity/components/buttons/button-grid"));

var _popover = _interopRequireDefault(require("part:@sanity/components/dialogs/popover"));

var _DocumentStatusBar = _interopRequireDefault(require("./DocumentStatusBar.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line complexity
function DocumentStatusBar(props) {
  var handleHistoryButtonClick = event => {
    if (typeof props.onHistoryStatusClick === 'function') {
      props.onHistoryStatusClick(event);
    }
  };

  var className = _DocumentStatusBar.default.root;

  if (props.isDisconnected) {
    className = _DocumentStatusBar.default.isDisconnected;
  } else if (props.isSyncing) {
    className = _DocumentStatusBar.default.isSyncing;
  }

  var statusIcon = null;

  if (props.isSyncing || props.isDisconnected) {
    statusIcon = _react.default.createElement("span", {
      className: _DocumentStatusBar.default.rotatingStatusIcon
    }, _react.default.createElement(_syncIcon.default, null));
  } else {
    statusIcon = _react.default.createElement("span", {
      className: _DocumentStatusBar.default.statusIcon
    }, _react.default.createElement(_checkIcon.default, null));
  }

  var historyStatus = null;

  if (props.historyStatus && props.isHistoryAvailable) {
    historyStatus = _react.default.createElement("button", {
      className: _DocumentStatusBar.default.historyButton // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: handleHistoryButtonClick,
      type: "button"
    }, props.historyStatus);
  } else if (props.historyStatus) {
    historyStatus = _react.default.createElement("span", {
      className: _DocumentStatusBar.default.historyLabel
    }, props.historyStatus);
  }

  return _react.default.createElement("div", {
    className: className
  }, _react.default.createElement("div", {
    className: _DocumentStatusBar.default.status
  }, props.badges && props.badges.length > 0 && _react.default.createElement("div", {
    className: _DocumentStatusBar.default.statusBadges
  }, props.badges.map(badge => _react.default.createElement(_default2.default, {
    key: badge.id,
    color: badge.color,
    title: badge.title
  }, badge.label))), historyStatus && _react.default.createElement("div", {
    className: _DocumentStatusBar.default.statusDetails
  }, historyStatus, " ", statusIcon)), props.actions && _react.default.createElement("div", {
    className: _DocumentStatusBar.default.actions
  }, _react.default.createElement("div", {
    className: _DocumentStatusBar.default.actionsWrapper
  }, _react.default.createElement(_DocumentStatusBarActions.default, {
    actions: props.actions,
    idPrefix: props.idPrefix,
    isDisconnected: props.isDisconnected
  }), props.confirmationDialog && _react.default.createElement(_popover.default, {
    onClickOutside: props.confirmationDialog.handleCancel,
    placement: "auto-end",
    useOverlay: false,
    hasAnimation: true
  }, _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("div", {
    className: _DocumentStatusBar.default.popOverText
  }, props.confirmationDialog.message), _react.default.createElement(_buttonGrid.default, null, _react.default.createElement(_default3.default, {
    onClick: props.confirmationDialog.handleCancel,
    kind: "simple"
  }, props.confirmationDialog.cancelText || 'Cancel'), _react.default.createElement(_default3.default, {
    onClick: props.confirmationDialog.handleConfirm,
    color: props.confirmationDialog.confirmColor || 'danger'
  }, props.confirmationDialog.confirmText || 'Confirm')))))));
}

DocumentStatusBar.propTypes = {
  actions: _propTypes.default.arrayOf(_propTypes.default.shape({
    color: _propTypes.default.oneOf(['primary', 'success', 'danger', 'white', 'warning']),
    handleClick: _propTypes.default.func,
    icon: _propTypes.default.func,
    id: _propTypes.default.string.isRequired,
    label: _propTypes.default.string.isRequired
  })),
  badges: _propTypes.default.arrayOf(_propTypes.default.shape({
    color: _propTypes.default.oneOf([undefined, 'success', 'warning', 'danger', 'info', 'neutral']),
    id: _propTypes.default.string.isRequired,
    label: _propTypes.default.string.isRequired,
    title: _propTypes.default.string
  })),
  confirmationDialog: _propTypes.default.shape({
    message: _propTypes.default.node.isRequired,
    handleConfirm: _propTypes.default.func.isRequired,
    handleCancel: _propTypes.default.func.isRequired,
    confirmText: _propTypes.default.string,
    cancelText: _propTypes.default.string,
    confirmColor: _propTypes.default.string
  }),
  historyStatus: _propTypes.default.node,
  idPrefix: _propTypes.default.string.isRequired,
  isDisconnected: _propTypes.default.bool,
  isHistoryAvailable: _propTypes.default.bool,
  isSyncing: _propTypes.default.bool,
  onHistoryStatusClick: _propTypes.default.func
};
DocumentStatusBar.defaultProps = {
  actions: undefined,
  badges: undefined,
  historyStatus: undefined,
  confirmationDialog: undefined,
  isDisconnected: false,
  isHistoryAvailable: false,
  isSyncing: false,
  onHistoryStatusClick: undefined
};
var _default = DocumentStatusBar;
exports.default = _default;