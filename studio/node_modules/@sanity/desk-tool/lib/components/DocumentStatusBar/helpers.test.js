"use strict";

var _helpers = require("./helpers");

describe('DocumentStatusBar/helpers/getPreviousFocusableMenuItemIdx', () => {
  it('should yield prev/next focusable action indexes when no actions are disabled', () => {
    var actions = [{}, {}, {}, {}]; // next

    expect((0, _helpers.getNextFocusableMenuItemIdx)(actions, -1)).toBe(0);
    expect((0, _helpers.getNextFocusableMenuItemIdx)(actions, 0)).toBe(1);
    expect((0, _helpers.getNextFocusableMenuItemIdx)(actions, 1)).toBe(2);
    expect((0, _helpers.getNextFocusableMenuItemIdx)(actions, 2)).toBe(0); // previous

    expect((0, _helpers.getPreviousFocusableMenuItemIdx)(actions, -1)).toBe(2);
    expect((0, _helpers.getPreviousFocusableMenuItemIdx)(actions, 0)).toBe(2);
    expect((0, _helpers.getPreviousFocusableMenuItemIdx)(actions, 1)).toBe(0);
    expect((0, _helpers.getPreviousFocusableMenuItemIdx)(actions, 2)).toBe(1);
  });
  it('should yield prev/next focusable action indexes when some actions are disabled', () => {
    var actions = [{}, {
      disabled: true
    }, {}, {}, {
      disabled: true
    }]; // next

    expect((0, _helpers.getNextFocusableMenuItemIdx)(actions, -1)).toBe(1);
    expect((0, _helpers.getNextFocusableMenuItemIdx)(actions, 1)).toBe(2);
    expect((0, _helpers.getNextFocusableMenuItemIdx)(actions, 2)).toBe(1); // previous

    expect((0, _helpers.getPreviousFocusableMenuItemIdx)(actions, -1)).toBe(2);
    expect((0, _helpers.getPreviousFocusableMenuItemIdx)(actions, 1)).toBe(2);
    expect((0, _helpers.getPreviousFocusableMenuItemIdx)(actions, 2)).toBe(1);
  });
});