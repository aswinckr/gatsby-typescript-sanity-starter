"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMenuItems = exports.getProductionPreviewItem = void 0;

var _react = _interopRequireDefault(require("react"));

var _publicIcon = _interopRequireDefault(require("part:@sanity/base/public-icon"));

var _binaryIcon = _interopRequireDefault(require("part:@sanity/base/binary-icon"));

var _historyIcon = _interopRequireDefault(require("part:@sanity/base/history-icon"));

var _resolveProductionUrl = _interopRequireDefault(require("part:@sanity/transitional/production-preview/resolve-production-url?"));

var _hotkeys = _interopRequireDefault(require("part:@sanity/components/typography/hotkeys"));

var _history = require("./Editor/history");

var _documentPaneMenuItems = _interopRequireDefault(require("./styles/documentPaneMenuItems.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import TrashIcon from 'part:@sanity/base/trash-icon'
// import VisibilityOffIcon from 'part:@sanity/base/visibility-off-icon'
// import ContentCopyIcon from 'part:@sanity/base/content-copy-icon'
// const getDuplicateItem = ({draft, published, isHistoryEnabled}) => ({
//   action: 'duplicate',
//   title: 'Duplicate',
//   icon: ContentCopyIcon,
//   isDisabled: isHistoryEnabled || (!draft && !published)
// })
// const getUnpublishItem = ({published, isLiveEditEnabled, isHistoryEnabled}) =>
//   isLiveEditEnabled
//     ? null
//     : {
//         action: 'unpublish',
//         title: 'Unpublish…',
//         icon: VisibilityOffIcon,
//         isDisabled: isHistoryEnabled || !published
//       }
// const getDeleteItem = ({draft, published, isHistoryEnabled}) => ({
//   group: 'danger',
//   action: 'delete',
//   title: 'Delete…',
//   icon: TrashIcon,
//   danger: true,
//   isDisabled: isHistoryEnabled || (!draft && !published)
// })
var getHistoryMenuItem = (_ref) => {
  var draft = _ref.draft,
      published = _ref.published,
      isLiveEditEnabled = _ref.isLiveEditEnabled,
      isHistoryEnabled = _ref.isHistoryEnabled,
      canShowHistoryList = _ref.canShowHistoryList;

  if (isLiveEditEnabled || !canShowHistoryList) {
    return null;
  }

  if ((0, _history.historyIsEnabled)()) {
    return {
      action: 'browseHistory',
      title: 'Browse history',
      icon: _historyIcon.default,
      isDisabled: isHistoryEnabled || !(draft || published)
    };
  }

  return null;
};

var getInspectItem = (_ref2) => {
  var draft = _ref2.draft,
      published = _ref2.published;
  return {
    action: 'inspect',
    title: _react.default.createElement("span", {
      className: _documentPaneMenuItems.default.menuItem
    }, "Inspect", ' ', _react.default.createElement("span", {
      className: _documentPaneMenuItems.default.hotkey
    }, _react.default.createElement(_hotkeys.default, {
      keys: ['Ctrl', 'Alt', 'I']
    }))),
    icon: _binaryIcon.default,
    isDisabled: !(draft || published)
  };
};

var getProductionPreviewItem = (_ref3) => {
  var draft = _ref3.draft,
      published = _ref3.published,
      selectedEvent = _ref3.selectedEvent;
  var snapshot = draft || published;

  if (!snapshot || !_resolveProductionUrl.default) {
    return null;
  }

  var previewUrl;

  try {
    previewUrl = (0, _resolveProductionUrl.default)(snapshot, selectedEvent && selectedEvent.rev);
  } catch (error) {
    error.message = "An error was thrown while trying to get production preview url: ".concat(error.message); // eslint-disable-next-line no-console

    console.error(error);
    return null;
  }

  if (!previewUrl) {
    return null;
  }

  return {
    action: 'production-preview',
    title: _react.default.createElement("span", {
      className: _documentPaneMenuItems.default.menuItem
    }, "Open preview", _react.default.createElement("span", {
      className: _documentPaneMenuItems.default.hotkey
    }, _react.default.createElement(_hotkeys.default, {
      keys: ['Ctrl', 'Alt', 'O']
    }))),
    icon: _publicIcon.default,
    url: previewUrl
  };
}; // eslint-disable-next-line import/prefer-default-export


exports.getProductionPreviewItem = getProductionPreviewItem;

var getMenuItems = (_ref4) => {
  var enabledActions = _ref4.enabledActions,
      draft = _ref4.draft,
      published = _ref4.published,
      isLiveEditEnabled = _ref4.isLiveEditEnabled,
      isHistoryEnabled = _ref4.isHistoryEnabled,
      selectedEvent = _ref4.selectedEvent,
      canShowHistoryList = _ref4.canShowHistoryList;
  return [getProductionPreviewItem, // enabledActions.includes('delete') && getUnpublishItem,
  // enabledActions.includes('create') && getDuplicateItem,
  getHistoryMenuItem, getInspectItem // enabledActions.includes('delete') && getDeleteItem
  ].filter(Boolean).map(fn => fn({
    draft,
    published,
    isLiveEditEnabled,
    isHistoryEnabled,
    selectedEvent,
    canShowHistoryList
  })).filter(Boolean);
};

exports.getMenuItems = getMenuItems;